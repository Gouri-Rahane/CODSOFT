/*Build a simple console-based to-do list manager that allows users to add, view, and delete tasks*/
#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Task Class
class Task {
private:
    string description;
    bool completed;

public:
    Task(string desc) : description(desc), completed(false) {}

    // Mark task as completed
    void markCompleted() {
        completed = true;
    }

    // Get task description
    string getDescription() const {
        return description;
    }

    // Get task status
    bool isCompleted() const {
        return completed;
    }
};

// ToDoList Class
class ToDoList {
private:
    vector<Task> tasks;

public:
    // Add a new task to the list
    void addTask(const string& description) {
        tasks.push_back(Task(description));
        cout << "Task added successfully.\n";
    }

    // View all tasks in the list
    void viewTasks() const {
        if (tasks.empty()) {
            cout << "No tasks available.\n";
            return;
        }

        cout << "Tasks:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].getDescription()
                 << " [" << (tasks[i].isCompleted() ? "Completed" : "Pending") << "]\n";
        }
    }

    // Mark a task as completed
    void markTaskAsCompleted(int taskNumber) {
        if (taskNumber < 1 || taskNumber > tasks.size()) {
            cout << "Invalid task number.\n";
            return;
        }
        tasks[taskNumber - 1].markCompleted();
        cout << "Task marked as completed.\n";
    }

    // Remove a task from the list
    void removeTask(int taskNumber) {
        if (taskNumber < 1 || taskNumber > tasks.size()) {
            cout << "Invalid task number.\n";
            return;
        }
        tasks.erase(tasks.begin() + taskNumber - 1);
        cout << "Task removed successfully.\n";
    }
};

// Main menu function
void displayMenu() {
    cout << "To-Do List Manager\n";
    cout << "1. Add a new task\n";
    cout << "2. View tasks\n";
    cout << "3. Mark task as completed\n";
    cout << "4. Remove task\n";
    cout << "5. Exit\n";
}

// Main Function
int main() {
    ToDoList todoList;
    int choice;

    while (true) {
        displayMenu();
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string description;
            cout << "Enter task description: ";
            cin.ignore(); // To ignore the leftover newline character from previous input
            getline(cin, description);
            todoList.addTask(description);
        } else if (choice == 2) {
            todoList.viewTasks();
        } else if (choice == 3) {
            int taskNumber;
            cout << "Enter task number to mark as completed: ";
            cin >> taskNumber;
            todoList.markTaskAsCompleted(taskNumber);
        } else if (choice == 4) {
            int taskNumber;
            cout << "Enter task number to remove: ";
            cin >> taskNumber;
            todoList.removeTask(taskNumber);
        } else if (choice == 5) {
            break;
        } else {
            cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
